[tool.poetry]
name = "gpyt_openai"
version = "0.0.1"
description = ""
authors = ["Paul C Peacock <pcp1976@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
include = ["gpyt_openai/py.typed"]

[tool.poetry.dependencies]
python = "^3.11"
opyoid = "^1.7.0"
pydantic = "^1.10.7"
flask-restful = "^0.3.10"
waitress = "^2.1.2"
loguru = "^0.7.0"
sqlalchemy = "^2.0.18"
requests = "^2.31.0"
psycopg2 = "^2.9.6"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.2"
nox = "^2022.11.21"
pyhamcrest = "^2.0.4"
pytest-bdd = "^6.1.1"
bandit = "^1.7.5"
mypy = "^1.1.1"
pylint = "^2.17.1"
flake8 = "^6.0.0"
black = "^23.3.0"
coverage = "^7.2.2"
toml = "^0.10.2"
pytest-env = "^0.8.1"
types-setuptools = "^67.6.0.6"
isort = "^5.12.0"
flake8-pyproject = "^1.2.3"
types-pyyaml = "^6.0.12.9"
pre-commit = "^3.2.2"
sqlalchemy-stubs = "^0.4"
types-requests = "^2.31.0.2"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.flake8]
max-line-length = 120
max-complexity = 10
exclude = ['.venv','.tox','dist','doc','build','*.egg','.tox.env']

[tool.pylint.main]
extension-pkg-whitelist = ["pydantic"]
fail-under = 10
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.11"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_", "ok"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 120
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "fixme",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "wrong-import-order",
    "useless-option-value",
    "literal-comparison",
    "comparison-with-itself",
    "comparison-of-constants",
    "no-classmethod-decorator",
    "no-staticmethod-decorator",
    "useless-object-inheritance",
    "property-with-parameters",
    "too-many-ancestors",
    "too-many-instance-attributes",
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-branches",
    "too-many-arguments",
    "too-many-locals",
    "too-many-statements",
    "too-many-boolean-expressions",
    "cyclic-import",
    "consider-using-from-import",
    "consider-merging-isinstance",
    "too-many-nested-blocks",
    "simplifiable-if-statement",
    "redefined-argument-from-local",
    "no-else-return",
    "consider-using-ternary",
    "trailing-comma-tuple",
    "stop-iteration-return",
    "simplify-boolean-expression",
    "inconsistent-return-statements",
    "useless-return",
    "consider-swap-variables",
    "consider-using-join",
    "consider-using-in",
    "consider-using-get",
    "chained-comparison",
    "consider-using-dict-comprehension",
    "consider-using-set-comprehension",
    "simplifiable-if-expression",
    "no-else-raise",
    "unnecessary-comprehension",
    "consider-using-sys-exit",
    "no-else-break",
    "no-else-continue",
    "super-with-arguments",
    "simplifiable-condition",
    "condition-evals-to-constant",
    "consider-using-generator",
    "use-a-generator",
    "consider-using-min-builtin",
    "consider-using-max-builtin",
    "consider-using-with",
    "unnecessary-dict-index-lookup",
    "use-list-literal",
    "use-dict-literal",
    "unnecessary-list-index-lookup",
    "duplicate-code"
]
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "10.0 - ((float(5 * error + warning + convention) / statement) * 10)"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["_HookRelay"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

[tool.mypy]
python_version = 3.11
plugins = [
    "pydantic.mypy",
    "sqlmypy",
]


[[tool.mypy.overrides]]
module = [
    "flask_restful"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]
bdd_features_base_dir = "tests/features/"
env = [
    "GPYT_COMMAND_BUS_URL=http://localhost:8080",
    "GPYT_OPENAPI_URL=http://localhost:8082",
    "GPYT_EVENT_STORE_URL=http://localhost:8081",
    "GPYT_DB_ECHO=True",
    "GPYT_MODULE_LIST=[\"math.cos\",\"math.sin\",\"math.tan\"]",
]
[tool.coverage.run]
omit = []
branch = true
[tool.coverage.report]
exclude_lines = [
    # Exclude TYPE_CHECKING import
    "if TYPE_CHECKING:",
]
